1.BinarySearch 的概念

    二分查找是一种算法，其输入是一个有序的元素列表（必须有序的原因稍后解释） 。如果要查找的元素包含在列表中，二分查找返回其位置；否则返回null。
    找最多需要log2n步，而简单查找最多需要n步

2.大O表示法
    它是用来指出了算法有多快。它是用来比较操作数，指出了算法运行时间的增速。
        例子：简单查找需要检查每个元素，因此需要执行n次操作。使用大O表示法，这个运行时间为O(n)。
        例子：二分查找需要执行log n次操作。使用大O表示法，这个运行时间怎么表示呢？ O(log n)

3.一些常见的大 O 运行时间
    下面按从快到慢的顺序列出了你经常会遇到的5种大O运行时间。
         O(log n)，也叫对数时间，这样的算法包括二分查找。
         O(n)，也叫线性时间，这样的算法包括简单查找。
         O(n * log n)，这样的算法包括第4章将介绍的快速排序——一种速度较快的排序算法。
         O(n2)，这样的算法包括第2章将介绍的选择排序——一种速度较慢的排序算法。
         O(n!)，这样的算法包括接下来将介绍的旅行商问题的解决方案——一种非常慢的算法。

4.主要启示如下。
     算法的速度指的并非时间，而是操作数的增速。
     谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。
     算法的运行时间用大O表示法表示。
     O(log n)比O(n)快，当需要搜索的元素越多时，前者比后者快得越多。
     二分查找的速度比简单查找快得多。
     O(log n)比O(n)快。需要搜索的元素越多，前者比后者就快得越多。
     算法运行时间并不以秒为单位。
     算法运行时间是从其增速的角度度量的